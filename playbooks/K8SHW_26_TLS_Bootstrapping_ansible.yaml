---
- name: 26 Agrega un nodo worker al cluster con funcionalidades de la API
  hosts: all
  remote_user: ubuntu
  gather_facts: false
  become: true

  vars:
    listado: "{{ 'ca.crt kube-proxy.crt kube-proxy.key' | split }}"
    worker_1: "192.168.56.21"
    worker_2: "192.168.56.22"
    cluster_dns: "172.16.0.10"
    pod_cidr: "172.24.0.0/16"
    loadbalancer: "192.168.56.30"

  tasks:

    - name: Recupera la fecha de caducidad para el fichero siguiente
      ansible.builtin.command:
        cmd: date -u --date "+7 days" +"%Y-%m-%dT%H:%M:%SZ"
      register: result
      changed_when: result.stdout != ""
      when: inventory_hostname == "master-1"

    - name: Genera un token_id aleatorio
      ansible.builtin.set_fact:
        token_id: "{{ lookup('community.general.random_string',upper=false,lower=true,numbers=true,length=5,special=false) }}"
      when: inventory_hostname == "master-1"

    - name: Genera un token_id aleatorio
      ansible.builtin.set_fact:
        token_secret: "{{ lookup('community.general.random_string',upper=false,lower=true,numbers=true,length=16,special=false) }}"
      when: inventory_hostname == "master-1"

    - name: Crea el fichero bootstrap-token-XXXXX.yaml que crea un token
      ansible.builtin.copy:
        dest: "/home/ubuntu/bootstrap-token-{{ token_id }}.yaml"
        mode: '0640'
        owner: root
        content: |
          apiVersion: v1
          kind: Secret
          metadata:
            # Name MUST be of form "bootstrap-token-<token id>"
            name: bootstrap-token-{{ token_id }}
            namespace: kube-system

          # Type MUST be 'bootstrap.kubernetes.io/token'
          type: bootstrap.kubernetes.io/token
          stringData:
            # Human readable description. Optional.
            description: "The default bootstrap token generated by 'kubeadm init'."

            # Token ID and secret. Required.
            token-id: {{ token_id }}
            token-secret: {{ token_secret }}

            # Expiration. Optional.
            expiration: {{ result.stdout }}

            # Allowed usages.
            usage-bootstrap-authentication: "true"
            usage-bootstrap-signing: "true"

            # Extra groups to authenticate the token as. Must start with "system:bootstrappers:"
            auth-extra-groups: system:bootstrappers:worker
      when: inventory_hostname == "master-1"

    - name: Print Token
      ansible.builtin.debug:
        msg: "Token de indetificación {{ token_id }}.{{ token_secret }}"
      when: inventory_hostname == "master-1"

    - name: Ejecuta/aplica con kubectl el yaml anterior
      ansible.builtin.command:
        cmd: kubectl create -f bootstrap-token-{{ token_id }}.yaml --kubeconfig admin.kubeconfig
      register: result
      changed_when: result.stdout != ""
      when: inventory_hostname == "master-1"

    - name: Ejecuta/aplica con kubectl la asociación del grupo del nodo worker para asignarle permisos
      ansible.builtin.command:
        cmd: "kubectl create clusterrolebinding create-csrs-for-bootstrapping \
              --clusterrole=system:node-bootstrapper --group=system:bootstrappers \
              --kubeconfig admin.kubeconfig"
      register: result
      changed_when: result.stdout != ""
      when: inventory_hostname == "master-1"
      ignore_errors: true

    - name: Ejecuta/aplica con kubectl la autorización a kubelet a aprovar el csr
      ansible.builtin.command:
        cmd: "kubectl create clusterrolebinding auto-approve-csrs-for-group \
            --clusterrole=system:certificates.k8s.io:certificatesigningrequests:nodeclient \
            --group=system:bootstrappers --kubeconfig admin.kubeconfig"
      register: result
      changed_when: result.stdout != ""
      when: inventory_hostname == "master-1"

    - name: Ejecuta/aplica con kubectl la autorización al nodo a renovar su certificado
      ansible.builtin.command:
        cmd: "kubectl create clusterrolebinding auto-approve-renewals-for-nodes \
            --clusterrole=system:certificates.k8s.io:certificatesigningrequests:selfnodeclient \
            --group=system:nodes --kubeconfig admin.kubeconfig"
      register: result
      changed_when: result.stdout != ""
      when: inventory_hostname == "master-1"

    - name: Mueve los certificados y keys al path correcto
      ansible.builtin.copy:
        src: "/home/ubuntu/{{ item }}"
        dest: "/var/lib/kubernetes/pki/{{ item }}"
        remote_src: true
        owner: root
        group: root
        mode: '0600'
      when: inventory_hostname == "worker-2"
      with_items: "{{ listado }}"

    - name: Crea el fichero bootstrap-kubeconfig
      ansible.builtin.copy:
        dest: "/var/lib/kubelet/bootstrap-kubeconfig"
        mode: '0600'
        owner: root
        content: |
          apiVersion: v1
          clusters:
          - cluster:
              certificate-authority: /var/lib/kubernetes/pki/ca.crt
              server: https://{{ loadbalancer }}:6443
            name: bootstrap
          contexts:
          - context:
              cluster: bootstrap
              user: kubelet-bootstrap
            name: bootstrap
          current-context: bootstrap
          kind: Config
          preferences: {}
          users:
          - name: kubelet-bootstrap
            user:
              token: {{ hostvars[groups['controlplanes'][0]]['token_id'] }}.{{ hostvars[groups['controlplanes'][0]]['token_secret'] }}
      when: inventory_hostname == "worker-2"

    - name: Print Token
      ansible.builtin.debug:
        msg: "Token de indetificación {{ hostvars[groups['controlplanes'][0]]['token_id'] }}.{{ hostvars[groups['controlplanes'][0]]['token_secret'] }}"
      when: inventory_hostname == "worker-2"

    - name: Crea el fichero kubelet-config.yaml
      ansible.builtin.copy:
        dest: "/var/lib/kubelet/kubelet-config.yaml"
        mode: '0600'
        owner: root
        content: |
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: true
            x509:
              clientCAFile: /var/lib/kubernetes/pki/ca.crt
          authorization:
            mode: Webhook
          clusterDomain: "cluster.local"
          clusterDNS:
            - {{ cluster_dns }}
          registerNode: true
          resolvConf: /run/systemd/resolve/resolv.conf
          rotateCertificates: true
          runtimeRequestTimeout: "15m"
          serverTLSBootstrap: true
      when: inventory_hostname == "worker-2"

    - name: Crea el fichero kubelet.service
      ansible.builtin.copy:
        dest: "/etc/systemd/system/kubelet.service"
        mode: '0600'
        owner: root
        content: |
          [Unit]
          Description=Kubernetes Kubelet
          Documentation=https://github.com/kubernetes/kubernetes
          After=containerd.service
          Requires=containerd.service

          [Service]
          ExecStart=/usr/local/bin/kubelet \
            --bootstrap-kubeconfig="/var/lib/kubelet/bootstrap-kubeconfig" \
            --config=/var/lib/kubelet/kubelet-config.yaml \
            --kubeconfig=/var/lib/kubelet/kubeconfig \
            --cert-dir=/var/lib/kubelet/pki/ \
            --container-runtime-endpoint=unix:///var/run/containerd/containerd.sock \
            --v=2
          Restart=on-failure
          RestartSec=5

          [Install]
          WantedBy=multi-user.target
      when: inventory_hostname == "worker-2"

    - name: Mueve los certificados y keys al path correcto
      ansible.builtin.copy:
        src: "/home/ubuntu/kube-proxy.kubeconfig"
        dest: "/var/lib/kube-proxy/kube-proxy.kubeconfig"
        remote_src: true
        owner: root
        group: root
        mode: '0600'
      when: inventory_hostname == "worker-2"

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: /var/lib/kube-proxy/
        state: directory
        mode: '0600'

    - name: Crea el fichero kube-proxy-config.yaml
      ansible.builtin.copy:
        dest: "/var/lib/kube-proxy/kube-proxy-config.yaml"
        mode: '0600'
        owner: root
        content: |
          kind: KubeProxyConfiguration
          apiVersion: kubeproxy.config.k8s.io/v1alpha1
          clientConnection:
            kubeconfig: /var/lib/kube-proxy/kube-proxy.kubeconfig
          mode: iptables
          clusterCIDR: {{ pod_cidr }}


    - name: Crea el fichero kubelet.service
      ansible.builtin.copy:
        dest: "/etc/systemd/system/kube-proxy.service"
        mode: '0600'
        owner: root
        content: |
          [Unit]
          Description=Kubernetes Kube Proxy
          Documentation=https://github.com/kubernetes/kubernetes

          [Service]
          ExecStart=/usr/local/bin/kube-proxy \
            --config=/var/lib/kube-proxy/kube-proxy-config.yaml
          Restart=on-failure
          RestartSec=5

          [Install]
          WantedBy=multi-user.target

    - name: Inicia y habilita el servicio kubelet
      ansible.builtin.service:
        name: kubelet
        enabled: true
        state: started
      when: inventory_hostname == "worker-2"

    - name: Inicia y habilita el servicio kube-proxy
      ansible.builtin.service:
        name: kube-proxy
        enabled: true
        state: started
      when: inventory_hostname == "worker-2"

    - name: Fuerza a systemd to re-execute itself
      ansible.builtin.systemd_service:
        daemon_reexec: true
      when: inventory_hostname == "worker-2"
